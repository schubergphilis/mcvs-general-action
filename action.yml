---
name: mcvs-general-action
description: |
  The Mission Critical Vulnerability Scanner (MCVS) General action.
inputs:
  yamllint-version:
    default: 1.37.1
    description: The version of YAMLLint.
  testing-type:
    description: |
      The testing type, e.g. integration, unit or some other.
runs:
  using: "composite"
  steps:
    - if: |
        github.event_name == 'pull_request' &&
        (inputs.testing-type == 'lint-commit' ||
          inputs.testing-type == 'lint-git')
      uses: actions/checkout@v4.2.2
      with:
        fetch-depth: 0
        ref: ${{ github.event.pull_request.head.ref }}
        repository: ${{ github.event.pull_request.head.repo.full_name }}
    - if: |
        github.event_name == 'pull_request' &&
        inputs.testing-type == 'lint-commit'
      run: |
        npm install --save-dev \
          commitlint-plugin-function-rules \
          @commitlint/{cli,config-conventional,ensure}

        cat ${GITHUB_ACTION_PATH}/configs/commitlint.config.mjs > \
          commitlint.config.mjs

        npx commitlint \
          --from ${{ github.event.pull_request.base.sha }} \
          --to ${{ github.event.pull_request.head.sha }} \
          --verbose
      shell: bash
    - if: |
        github.event_name == 'pull_request' &&
        inputs.testing-type == 'lint-git'
      run: |
        git fetch origin main
        git checkout main
        git checkout ${{ github.event.pull_request.head.ref }}
      shell: bash
    - if: |
        github.event_name == 'pull_request' &&
        inputs.testing-type == 'lint-git'
      run: |
        commits_behind=$(git rev-list --count HEAD..origin/main)
        if (( commits_behind > 0 )); then
          echo "❗ Branch is behind main by $commits_behind commits"
          exit 1
        fi
        echo "✅ Branch is up to date with main"
      shell: bash
    # yamllint disable rule:line-length
    - if: |
        github.event_name == 'pull_request' &&
        inputs.testing-type == 'lint-git'
      run: |
        MAIN_BRANCH="main"
        REMOTE="origin"

        current_branch=$(git rev-parse --abbrev-ref HEAD)

        if [[ "${current_branch}" == "${MAIN_BRANCH}" ]]; then
          echo "Already on ${MAIN_BRANCH}, nothing to check."
          exit 0
        fi

        commits=$(git rev-list $MAIN_BRANCH..HEAD --merges)

        for sha in $commits; do
          p1=$(git rev-parse "$sha^1")
          p2=$(git rev-parse "$sha^2")

          if git merge-base --is-ancestor "${p1}" "${REMOTE}/${MAIN_BRANCH}" && ! git merge-base --is-ancestor "${p2}" "${REMOTE}/${MAIN_BRANCH}"; then
            merged_from="${p1}"
          elif git merge-base --is-ancestor "${p2}" "${REMOTE}/${MAIN_BRANCH}" && ! git merge-base --is-ancestor "${p1}" "${REMOTE}/${MAIN_BRANCH}"; then
            merged_from="${p2}"
          else
            continue
          fi

          echo "❗ Detected a merge of ${MAIN_BRANCH} into ${current_branch} at commit ${sha}"
          echo "  Commit message: $(git log --format=%s -n 1 $sha)"
          exit 1
        done

        echo "✅ No merges of ${MAIN_BRANCH} detected in ${current_branch}"
        exit 0
      shell: bash
    - if: |
        github.event_name == 'pull_request' &&
        inputs.testing-type == 'lint-git'
      run: |
        fixup_commits=$(git log --oneline --grep="^fixup!" --grep="^squash!" origin/main..HEAD)
        if [ -n "$fixup_commits" ]; then
          echo "❗ Found fixup or squash commits that should be squashed:"
          echo "$fixup_commits"
          exit 1
        fi
        echo "✅ No fixup or squash commits found"
      shell: bash
    - if: inputs.testing-type == 'yamllint'
      run: |
        pip install --user yamllint==${{ inputs.yamllint-version }}
        yamllint -c ${GITHUB_ACTION_PATH}/configs/yamllint.yaml .
      shell: bash
